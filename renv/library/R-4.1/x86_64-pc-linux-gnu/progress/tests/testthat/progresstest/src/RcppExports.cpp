// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// test_progress
Rcpp::CharacterVector test_progress(Rcpp::CharacterVector formatSEXP);
RcppExport SEXP _progresstest_test_progress(SEXP formatSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type formatSEXP(formatSEXPSEXP);
    rcpp_result_gen = Rcpp::wrap(test_progress(formatSEXP));
    return rcpp_result_gen;
END_RCPP
}
// test_is_option_enabled
Rcpp::LogicalVector test_is_option_enabled();
RcppExport SEXP _progresstest_test_is_option_enabled() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_is_option_enabled());
    return rcpp_result_gen;
END_RCPP
}
// test_units
Rcpp::CharacterVector test_units();
RcppExport SEXP _progresstest_test_units() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_units());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_progresstest_test_progress", (DL_FUNC) &_progresstest_test_progress, 1},
    {"_progresstest_test_is_option_enabled", (DL_FUNC) &_progresstest_test_is_option_enabled, 0},
    {"_progresstest_test_units", (DL_FUNC) &_progresstest_test_units, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_progresstest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
